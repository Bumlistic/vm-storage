name: "Terraform - Hosted Agent Deploy"

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Plan and Apply
    runs-on: self-hosted
    environment: production

    # If your .tf files are in a subfolder, uncomment and set it:
    # defaults:
    #   run:
    #     working-directory: infra/rg-storage

    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID:       ${{ secrets.TF_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.TF_CLIENT_SECRET }}
      ARM_TENANT_ID:       ${{ secrets.TF_TENANT_ID }}
      STATE_ACCOUNT:       selfhostagentstorage
      STATE_CONTAINER:     selfhost-container

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform (disable wrapper so exit codes work)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.3"
          terraform_wrapper: false

      - name: Show working directory and Terraform files
        shell: powershell
        run: |
          Write-Host "PWD: $(Get-Location)"
          dir -Name *.tf

      - name: Terraform version
        shell: powershell
        run: terraform.exe version

      - name: Terraform Init (reconfigure and upgrade)
        shell: powershell
        run: |
          $args = @("-input=false","-reconfigure","-upgrade")
          & terraform.exe init @args
          exit $LASTEXITCODE

      - name: Terraform Validate
        shell: powershell
        run: |
          & terraform.exe validate
          exit $LASTEXITCODE

      - name: Terraform FMT Check (non-blocking)
        shell: powershell
        run: |
          & terraform.exe fmt -check
          if ($LASTEXITCODE -ne 0) {
            Write-Host "terraform fmt would reformat files; continuing."
            $global:LASTEXITCODE = 0
          }

      - name: Terraform state (before plan)
        shell: powershell
        run: |
          & terraform.exe state list
          if ($LASTEXITCODE -ne 0) {
            Write-Host "No resources in state (yet)."
            $global:LASTEXITCODE = 0
          }

      - name: Terraform Plan (capture detailed exit code)
        id: plan
        shell: powershell
        run: |
          $planArgs = @("-input=false","-out=tfplan.bin","-detailed-exitcode")
          & terraform.exe plan @planArgs
          $code = $LASTEXITCODE
          Write-Host "Plan exit code: $code"
          if ($code -eq 2) {
            "has_changes=true"  | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          } elseif ($code -eq 0) {
            "has_changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 0
          } else {
            exit $code
          }

      - name: Show Plan (human readable)
        shell: powershell
        run: |
          & terraform.exe show -no-color tfplan.bin
          exit $LASTEXITCODE

      - name: Terraform Apply (only when there are changes)
        if: steps.plan.outputs.has_changes == 'true'
        shell: powershell
        run: |
          $applyArgs = @("-input=false","-auto-approve","tfplan.bin")
          & terraform.exe apply @applyArgs
          exit $LASTEXITCODE

      - name: Terraform Outputs
        shell: powershell
        run: |
          & terraform.exe output
          exit $LASTEXITCODE
